#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    spawn = require("child_process").spawn,
    strata = require("../lib/index"),
    utils = strata.utils;

var options = {appFile: path.resolve("./app.js")},
    arg;

for (var i = 2; i < process.argv.length; ++i) {
    arg = process.argv[i];

    function nextArg(defaultValue) {
        var next = process.argv[++i] || defaultValue;

        if (!next) {
            printUsage();
            process.exit();
        }

        return next;
    }

    switch (arg) {
    case "-a":
        options.host = nextArg();
        break;
    case "-c":
        options.certFile = nextArg();
        break;
    case "-d":
        options.dir = nextArg(".");
        break;
    case "-h":
    case "--help":
        printUsage();
        process.exit();
        break;
    case "-k":
        options.keyFile = nextArg();
        break;
    case "-p":
        options.port = nextArg();
        break;
    case "-q":
        options.quiet = true;
        break;
    case "-r":
        options.reload = Math.round(parseFloat(nextArg(1)) * 1000);
        break;
    case "-s":
        options.socket = nextArg();
        break;
    case "-v":
    case "--version":
        printVersion();
        process.exit();
        break;
    default:
        options.appFile = path.resolve(arg);
    }
}

if (options.certFile) {
    options.cert = fs.readFileSync(options.certFile);
}

if (options.keyFile) {
    options.key = fs.readFileSync(options.keyFile);
}

if (options.reload) {
    var child;

    function spawnChild(options, timeout) {
        var argv = childArgv(options);

        if (child) {
            // All children after the first should boot quietly.
            argv.push("-q");
        }

        child = spawn("strata", argv, {
            cwd: process.cwd(),
            env: process.env
        });

        child.stdout.on("data", function (chunk) {
            process.stdout.write(chunk);
        });

        child.stderr.on("data", function (chunk) {
            process.stderr.write(chunk);
        });

        child.on("exit", function () {
            spawnChild(options);
        });

        setTimeout(function () {
            child.kill();
        }, options.reload);
    }

    // Spawn the child process.
    spawnChild(options);

    // Clean up the child process when the parent exits.
    process.on("exit", function () {
        child.exit();
    });
} else {
    var app;
    if (options.dir) {
        app = strata.file(utils.notFound, options.dir);
        app = strata.directory(app, options.dir);
        app = strata.commonLogger(app);
    } else {
        app = require(options.appFile);
    }

    strata.run(app, options);
}

/**
 * Prints the current version of Strata to the console.
 */
function printVersion() {
    console.log(strata.version.join("."));
}

/**
 * Prints a usage message to the console.
 */
function printUsage() {
    var usage = [
        "strata v. " + strata.version.join("."),
        "Usage: strata [options] [appFile]",
        "",
        "  Starts the Strata application contained in the given appFile.",
        "  If none is given, uses ./app.js.",
        "",
        "Options:",
        "  -a ADDR         The address to bind to (defaults to 0.0.0.0)",
        "  -c PATH         The name of the public key certificate file",
        "                  (HTTPS only)",
        "  -d PATH         The path to a directory to serve (defaults to .).",
        "                  If this is given the appFile is ignored",
        "  -h, --help      Show this help message and exit",
        "  -k PATH         The name of the private key file (HTTPS only)",
        "  -p PORT         The port number to listen on (defaults to " + strata.defaultPort + ")",
        "  -q              Don't print a startup message to the console",
        "  -r N            Reload all application code every N seconds",
        "                  (defaults to 1). Good for development",
        "  -s PATH         The unix socket to listen to. If this is given",
        "                  the -a and -p options are ignored",
        "  -v, --version   Show the current version of Strata and exit"
    ].join("\n");

    console.log(usage);
}

/**
 * Reconstructs an argv array from the given `options` object suitable for
 * running a server in a child process.
 */
function childArgv(options) {
    var argv = [];

    if (options.host)       argv.push("-a", options.host);
    if (options.certFile)   argv.push("-c", options.certFile);
    if (options.dir)        argv.push("-d", options.dir);
    if (options.keyFile)    argv.push("-k", options.keyFile);
    if (options.port)       argv.push("-p", options.port);
    if (options.socket)     argv.push("-s", options.socket);
    if (options.appFile)    argv.push(options.appFile);

    return argv;
}
